// Code generated by MockGen. DO NOT EDIT.
// Source: writer.go

// Package messaging is a generated GoMock package.
package messaging

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWriter is a mock of Writer interface
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockWriter) Write(key, value []byte) error {
	ret := m.ctrl.Call(m, "Write", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockWriterMockRecorder) Write(key, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriter)(nil).Write), key, value)
}

// Close mocks base method
func (m *MockWriter) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockWriterMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriter)(nil).Close))
}

// MockBrokerWriter is a mock of BrokerWriter interface
type MockBrokerWriter struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerWriterMockRecorder
}

// MockBrokerWriterMockRecorder is the mock recorder for MockBrokerWriter
type MockBrokerWriterMockRecorder struct {
	mock *MockBrokerWriter
}

// NewMockBrokerWriter creates a new mock instance
func NewMockBrokerWriter(ctrl *gomock.Controller) *MockBrokerWriter {
	mock := &MockBrokerWriter{ctrl: ctrl}
	mock.recorder = &MockBrokerWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBrokerWriter) EXPECT() *MockBrokerWriterMockRecorder {
	return m.recorder
}

// WriteMessages mocks base method
func (m *MockBrokerWriter) WriteMessages(ctx context.Context, msgs ...Message) error {
	varargs := []interface{}{ctx}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessages indicates an expected call of WriteMessages
func (mr *MockBrokerWriterMockRecorder) WriteMessages(ctx interface{}, msgs ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockBrokerWriter)(nil).WriteMessages), varargs...)
}

// Close mocks base method
func (m *MockBrokerWriter) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockBrokerWriterMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBrokerWriter)(nil).Close))
}
